#!/usr/bin/env python
'''
    Submission script to DICE for src/unfolding_tests/create_unfolding_pull_data.py
'''
from __future__ import print_function
from optparse import OptionParser
from config import XSectionConfig
from condor import job
from condor.jobtypes.unfolding_pull_job import UnfoldingPullJob
import os
import sys


def main():
    parser = OptionParser(__doc__)
    parser.add_option("-c", "--com", dest="com", type=int,
                      help="Centre-of-mass energy to be used for submission")
    (options, _) = parser.parse_args()

    # first the global variables
    centre_of_mass_energy = options.com
    config = XSectionConfig(centre_of_mass_energy)
    method = 'RooUnfoldSvd'
    n_toy_mc = n_toy_data = 300
    output_folder = 'data/pull_data/'
    offset_toy_mc = offset_toy_data = 0
    tau_value = -1
    k_value = -1

    if centre_of_mass_energy == 13:
        variables = config.tau_values_electron.keys()
        # lets exclude the reco stuff for now
        variables = ['MET', 'HT', 'ST', 'WPT']
    else:
        variables = config.k_values_electron.keys()

    input_template = 'data/toy_mc/toy_mc_{0}_N_from_1_to_{1}_{2}TeV.root'
    pull_jobs = []

    for variable in variables:
        input_file_name = input_template.format(variable, n_toy_mc,
                                                centre_of_mass_energy)
        # check if file exists
        if not os.path.exists(input_file_name):
            print('Input file {0} does not exist'.format(input_file_name))
            sys.exit(1)
        for channel in ['electron', 'muon']:
            if centre_of_mass_energy == 13:
                if channel == 'electron':
                    tau_value = config.tau_values_electron[variable]
                else:
                    tau_value = config.tau_values_muon[variable]
            else:
                if channel == 'electron':
                    k_value = config.k_values_electron[variable]
                else:
                    k_value = config.k_values_muon[variable]

            pull_job = UnfoldingPullJob(input_file_name, method, channel,
                                        centre_of_mass_energy,
                                        variable,
                                        n_toy_mc,
                                        n_toy_data,
                                        output_folder,
                                        offset_toy_mc,
                                        offset_toy_data,
                                        k_value,
                                        tau_value
                                        )
            pull_jobs.append(pull_job)

    # Since we are analysing 300 x 300 = 90000 samples and one 10x10 sample 
    # takes around 7 seconds it will take 1.75h in a single job. 
    # For very fast (~1 min) processing we want at least 100 jobs.
    n_jobs = 100  # this is per pull_job
    condor_job = job.Condor(n_jobs, request_memory=50)
    for j in pull_jobs:
        condor_job.add_job(j)
    condor_job.submit()
    print('All jobs submitted')


if __name__ == '__main__':
    main()
